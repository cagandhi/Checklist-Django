"""
Django settings for checklist_project project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import logging.config
import os

import django_heroku

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG_VALUE") == "True"  # True

ALLOWED_HOSTS = ["django-checklist.herokuapp.com"]

# Application definition

INSTALLED_APPS = [
    "checklist.apps.ChecklistConfig",
    "users.apps.UsersConfig",
    "crispy_forms",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "djrichtextfield",
    "social_django",
    "django_social_share",
    "storages",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "social_django.middleware.SocialAuthExceptionMiddleware",
]

ROOT_URLCONF = "checklist_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates")
        ],  # https://stackoverflow.com/a/38353582/6543250 - override 3rd party app templates
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "checklist.context_processors.add_variable_to_context",
                "social_django.context_processors.backends",  # <--
                "social_django.context_processors.login_redirect",  # <--
            ],
        },
    },
]

WSGI_APPLICATION = "checklist_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


AUTHENTICATION_BACKENDS = (
    "social_core.backends.google.GoogleOAuth2",
    "social_core.backends.facebook.FacebookOAuth2",
    "django.contrib.auth.backends.ModelBackend",
)


# SOCIAL LOGINS

# Reference:
# GOOGLE - https://medium.com/trabe/oauth-authentication-in-django-with-social-auth-c67a002479c1
# FACEBOOK - https://simpleisbetterthancomplex.com/tutorial/2016/10/24/how-to-add-social-login-to-django.html

# GOOGLE LOGIN
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get("SOCIAL_AUTH_GOOGLE_OAUTH2_KEY")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get("SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET")
SOCIAL_AUTH_URL_NAMESPACE = "social"
# SOCIAL_AUTH_GOOGLE_LOGIN_URL = '/auth/login/google-oauth2/'
# SOCIAL_AUTH_LOGIN_REDIRECT_URL = 'profile'

# FB LOGIN
SOCIAL_AUTH_FACEBOOK_KEY = os.environ.get("SOCIAL_AUTH_FACEBOOK_KEY")
SOCIAL_AUTH_FACEBOOK_SECRET = os.environ.get("SOCIAL_AUTH_FACEBOOK_SECRET")


# django-richtextfield -> refer: https://github.com/jaap3/django-richtextfield
DJRICHTEXTFIELD_CONFIG = {
    "js": ["//tinymce.cachefly.net/4.1/tinymce.min.js"],
    "init_template": "djrichtextfield/init/tinymce.js",
    "settings": {
        "menubar": False,
        "plugins": "link image",
        "toolbar": "bold italic | link image | removeformat",
        "width": 700,
    },
}

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# full path to a dir where Django will store uploaded files
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
# url where we access the images in the browser - /media/profile_pics/<image_name>
MEDIA_URL = "/media/"

CRISPY_TEMPLATE_PACK = "bootstrap4"

# where should the user be redirected after logging in
LOGIN_REDIRECT_URL = "checklist-home"
# where is the login route so people can be redirected to login page if they access login required pages when logged out
LOGIN_URL = "login"

# just for verification
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get("DJANGO_CHECKLIST_EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("DJANGO_CHECKLIST_EMAIL_HOST_PASSWORD")


# REFER: https://django-storages.readthedocs.io/en/latest/
AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")

AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
# REGION to be set as default region is us-east-2
AWS_S3_REGION_NAME = "us-east-1"

# credentials to settings file so django app can talk to the database
# pip install django-heroku
django_heroku.settings(locals(), test_runner=False)


# Add logging information - integrate logger
# refer: https://www.scalyr.com/blog/getting-started-quickly-django-logging and https://docs.djangoproject.com/en/3.1/topics/logging/
LOGGING_CONFIG = None
LOG_FILE = "tmp/debug.log"

os.makedirs("tmp/debug.log", exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "console": {"format": "%(name)-12s %(levelname)-8s %(message)s"},
        "file": {"format": "%(asctime)s %(name)-12s %(levelname)-8s %(message)s"},
    },
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "console"},
        "file": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "formatter": "file",
            "filename": LOG_FILE,
        },
    },
    "loggers": {"": {"level": "DEBUG", "handlers": ["file"]}},
}
logging.config.dictConfig(LOGGING)
